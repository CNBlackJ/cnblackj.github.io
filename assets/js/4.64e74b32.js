(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{59:function(t,a,s){"use strict";s.r(a);var n=s(0),e=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("div",{staticClass:"content"},[s("h1",{attrs:{id:"你在意过每天输入的网址是否区分大小写么？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#你在意过每天输入的网址是否区分大小写么？","aria-hidden":"true"}},[t._v("#")]),t._v(" 你在意过每天输入的网址是否区分大小写么？")]),s("p",[s("img",{attrs:{src:"http://upload-images.jianshu.io/upload_images/2283607-1a3a36f068b0c1c1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"letters.jpg"}})]),s("p",[t._v("通常在浏览器地址栏输入的网址我们叫做URL(统一资源定位符:Universal Resource Locators)。先来看一个简单的URL：\n"),s("code",[t._v("http://www.example.com/here/is/path/file.html")]),t._v("\n这个URL可以简单的描述为：使用HTTP协议去www.example.com所在的机器上读取文件file.html这个文件。当然这是简单的去理解，更详细的解析可以看"),s("a",{attrs:{href:"https://www.w3.org/TR/WD-html40-970708/htmlweb.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("这里")]),t._v("。从这个描述中可以看到，一个URL会被分成三部分，形如：[协议]😕/[域名]/[路径]。")]),s("ul",[s("li",[t._v("协议：最常见的就是HTTP跟HTTPS，除了这个还有FTP文件传输协议等，这里是不区分大小写的")]),s("li",[t._v("域名：域名(Domain Name)是需要通过域名系统(DNS)成功解析才能够正常访问到对应的IP地址，域名的命名规则之一就是：在域名中不区分大小写")]),s("li",[t._v("路径：路径部分是否区分大小写，则要看该网址对应的后台是如何实现的")])]),s("p",[t._v("只有路径部分才是会区分大小写。每个网站都有后台的服务器，如果服务器只是单纯的采用路径映射到机器的文件系统中，那不同的操作系统平台是会有不同的区别的：")]),s("ul",[s("li",[t._v("Linux：常见的是采用第三/四代扩展文件系统(ext3/4)，在该文件系统下是需要区分大小写的")]),s("li",[t._v("Mac OS X: 使用的HFS / HFS + / APFS(2016年发布的macOS Sierra开始)文件系统是不区分大小写")]),s("li",[t._v("Windows：微软公司开发的NTFS也是不区分大小写的")])]),s("p",[t._v("对于我们最经常接触到应用服务器来说，访问一个路径并不是指向文件系统中的某一个文件，而是作为一个字符串传输给应用服务器进行解析处理。")]),s("p",[t._v("我这里用了Koa来做一个简单的测试，在URL的路径中输入大小写会出现什么情况。")]),s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Koa "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("require")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v("'koa'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" app "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{attrs:{class:"token class-name"}},[t._v("Koa")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" router "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("require")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v("'koa-router'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nrouter  \n  "),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token keyword"}},[t._v("get")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v("'/'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ctx"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" next"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" ctx"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("body "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token template-string"}},[s("span",{attrs:{class:"token string"}},[t._v("`root path: ")]),s("span",{attrs:{class:"token interpolation"}},[s("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("ctx"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("req"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("url"),s("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{attrs:{class:"token string"}},[t._v("`")])]),t._v("  "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token keyword"}},[t._v("get")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v("'/lowercase'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ctx"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" next"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("   ctx"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("body "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token template-string"}},[s("span",{attrs:{class:"token string"}},[t._v("`lowercase path: ")]),s("span",{attrs:{class:"token interpolation"}},[s("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("ctx"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("req"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("url"),s("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{attrs:{class:"token string"}},[t._v("`")])]),t._v("  "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token keyword"}},[t._v("get")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token string"}},[t._v("'/UPPERCASE'")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ctx"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" next"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" ctx"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("body "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token template-string"}},[s("span",{attrs:{class:"token string"}},[t._v("`uppercase path: ")]),s("span",{attrs:{class:"token interpolation"}},[s("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("ctx"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("req"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("url"),s("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{attrs:{class:"token string"}},[t._v("`")])]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\napp"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("use")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("router"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("routes")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\napp"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("listen")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token number"}},[t._v("3000")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),s("ul",[s("li",[s("a",{attrs:{href:"http://localhost:3000/",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://localhost:3000/")]),t._v(" -> root path: /")]),s("li",[s("a",{attrs:{href:"http://localhost:3000/lowercase",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://localhost:3000/lowercase")]),t._v(" -> lowercase path: /lowercase")]),s("li",[s("a",{attrs:{href:"http://localhost:3000/LOWERCASE",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://localhost:3000/LOWERCASE")]),t._v(" -> lowercase path: /LOWERCASE")]),s("li",[s("a",{attrs:{href:"http://localhost:3000/UPPERCASE",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://localhost:3000/UPPERCASE")]),t._v(" -> uppercase path: /UPPERCASE")]),s("li",[s("a",{attrs:{href:"http://localhost:3000/uppercase",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://localhost:3000/uppercase")]),t._v(" -> uppercase path: /uppercase")]),s("li",[s("a",{attrs:{href:"http://localhost:3000/UpPerCase",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://localhost:3000/UpPerCase")]),t._v(" -> uppercase path: /UpPerCase")])]),s("p",[t._v("👆上面的六种情况可以我们可以看到，path并没有区分大小写。")]),s("p",[t._v("当我在地址栏输入："),s("a",{attrs:{href:"https://www.zhihu.com/EXPLORE",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.zhihu.com/EXPLORE")]),t._v(" 并没有成功跳转，而是出现了一个404页面，这里又是什么原因呢？")]),s("p",[t._v("我们还是以刚刚Koa的那个为例子来看。在例子中，使用了"),s("a",{attrs:{href:"https://github.com/alexmingoia/koa-router",target:"_blank",rel:"noopener noreferrer"}},[t._v("koa-router")]),t._v("这个中间件来解析路由，koa-router里面有个match方法对path解析，而这个match方法主要是调用了"),s("a",{attrs:{href:"https://github.com/pillarjs/path-to-regexp",target:"_blank",rel:"noopener noreferrer"}},[t._v("path-to-regexp")]),t._v("来生成进行解析，最终正则成功匹配对应的路由进行访问相对应的资源。")]),s("p",[t._v("下面看看没有使用类似koa-router这样的中间件，会是怎样的效果。")]),s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("app.use((ctx, next) => {\n  const path = ctx.req.url\n  if (path === '/lowercase') {\n    ctx.body = 'success to request lowercase resource'\n  } else if (path === '/UPPERCASE') {\n    ctx.body = 'SUCCESS TO REQUEST UPPERCASE RESOURCE'\n  } else {\n    ctx.body = `success to visit: ${path}`\n  }\n})\n")])]),s("ul",[s("li",[s("a",{attrs:{href:"http://localhost:3000/",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://localhost:3000/")]),t._v(" -> success to visit: /")]),s("li",[s("a",{attrs:{href:"http://localhost:3000/lowercase",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://localhost:3000/lowercase")]),t._v(" -> success to request lowercase resource")]),s("li",[s("a",{attrs:{href:"http://localhost:3000/LOWERCASE",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://localhost:3000/LOWERCASE")]),t._v(" -> success to visit: /LOWERCASE")]),s("li",[s("a",{attrs:{href:"http://localhost:3000/UPPERCASE",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://localhost:3000/UPPERCASE")]),t._v(" -> SUCCESS TO REQUEST UPPERCASE RESOURCE")]),s("li",[s("a",{attrs:{href:"http://localhost:3000/uppercase",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://localhost:3000/uppercase")]),t._v(" -> success to visit: /uppercase")]),s("li",[s("a",{attrs:{href:"http://localhost:3000/UpPerCase",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://localhost:3000/UpPerCase")]),t._v(" -> success to visit: /UpPerCase")])]),s("p",[t._v("可以看到如果自己对path进行处理的话，是可以自己控制是否大小写敏感的。实际的运用中，为了易用性考虑，尽量满足不区分大小写，这应该也是router-koa这类中间件设计成case insensitive的考虑之一呱(猜的...hah)。知乎传说用的是Python的Tornado，而Tornado的路由采用正则直接匹配解析的，所以，访问"),s("a",{attrs:{href:"https://www.zhihu.com/EXPLORE",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.zhihu.com/EXPLORE")]),t._v("不成功应该是正则解析没有做到大小写不敏感吧(又是猜的...)")]),s("p",[t._v("那在微博或者其他平台里面经常看得到这样的URL："),s("a",{attrs:{href:"http://t.cn/Ri98Hke",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://t.cn/Ri98Hke")]),t._v(" 这是又是怎么一个情况呢？")]),s("p",[t._v("这种一般叫做短链接，既然都叫短链接了，自然是希望越短越好啦，然而实际的操作中我们会发现，太短满足不了日益增长的业务需求(然而并没增长)吖，那太长了也不符合实际吖，我微博只给你发140个字符，你一个链接都40个字符了。所以，大小写敏感的话会使得尽可能短又尽可能多这么变态的需求。以微博七位短链路径为例，一起来看看(数字：10个，大写字母：26个，小写字母：26个)")]),s("ul",[s("li",[t._v("case insensitive: (10 + 26)^7 = 78,364,164,096")]),s("li",[t._v("case sensitive: (10 + 26 + 26)^7 = 3,521,614,606,208")])]),s("p",[t._v("所以短链还是大小写敏感方便一些。")]),s("p",[t._v("其实在早两天遇到这个小问题之前我还是一直以为URL是严格区分大小写的。我个人觉得如果api或者网页提供给我们使用的时候，还是应该遵从api的命名规则去使用，尽管是大小写不敏感。")]),s("p",[t._v("源码地址："),s("a",{attrs:{href:"https://github.com/CNBlackJ/caseSensitive",target:"_blank",rel:"noopener noreferrer"}},[t._v("CNBlackJ/caseSensitive")]),t._v("\n首发"),s("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/29012766",target:"_blank",rel:"noopener noreferrer"}},[t._v("知乎专栏")])])])}],!1,null,null,null);a.default=e.exports}}]);